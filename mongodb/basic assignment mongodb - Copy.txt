query: mongod

query: mongosh

query: use mongo_practice

query: db.createCollection("movies")

query: db.movies.insert({_id:1, title:"Fight Club", writer:"Chuck Palahniuko", year:1999, actors:["Brad Pitt", "Edward Norton"]})

query: db.movies.insertMany( [ {_id: 2,title:"Pulp FIction",writer:"Quentin Tarantino",year: 1994,actors:["John Travolta","Uma Thurman"]}, {_id: 3,title:"Inglorious Basterds",writer:"Quentin Tarantino",year: 2009,actors:["Brad Pitt","Diane Kruger","Eli Roth"]}])

query: db.movies.insertMany( [ {_id: 4,title:"The Hobbit: An Unexpected Journey",writer:"J.R.R. Tolkein",year: 2012,franchise:"The Hobbit"}, {_id: 5,title:"The Hobbit: The Desolation of Smaug",writer:"J.R.R. Tolkein",year: 2013,franchise:"The Hobbit"},{_id:6,title:"The Hobbit: The Battle of the Five Armies",year:"2012",franchise:"The Hobbit",synopsis:"Bilbo and Company are forced to engage in a war against an array of cpmbatants and keep the lonely Mountain  from ling into the hands of a rising darkness."},{_id:7, title:"Pee Wee Herman's Big Adventure"},{_id:8,title:"Avatar"}])

Query / Find Documents

1. get all documents
query: db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"
query: db.movies.find({writer:"Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt"
query: db.movies.find({actors:"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit"
query: db.movies.find({franchise:"The Hobbit"})

5. get all movies released in the 90s
query: db.movies.find({year:{$gt:1989,$lt:2000}})

6. get all movies released before the year 2000 or after 2010
query: db.movies.find({year:{$gt:2010},year:{$lt:2000}})

Update Documents

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
query: db.movies.update({title:"The Hobbit: An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
query: db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{$set:{synopsis:"The dwarves, along with Bilbo Baggins aGandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins n possession of a mysterious and magical ring"}})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
query: db.movies.update({title:"Pulp FIction"},{$push:{actors:"Samuel L. Jackson"}})

Text Search

1. find all movies that have a synopsis that contains the word "Bilbo"
query: db.movies.find({synopsis:/Bilbo./}).pretty()

2. find all movies that have a synopsis that contains the word "Gandalf"
query: db.movies.find({synopsis:/Gandalf/}).pretty()

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
query: db.movies.find({synopsis:/Bilbo/},{synopsis:{$not:/Gandalf/}}).pretty()

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
query: db.movies.find({$and: [{synopsis:/Bilbo/},{synopsis:{$not:/Gandalf/}}]}).pretty()

5. find all movies that have a synopsis that contains the word "gold" and "dragon"
query: db.movies.find({$or: [{synopsis:/dwarves/},{synopsis:/hobbit/}]}).pretty()

Delete Documents

1. delete the movie "Pee Wee Herman's Big Adventure
query: db.movies.find({$and: [{synopsis:/gold/},{synopsis:/dragon/}]}).pretty()

2. delete the movie "Avatar"
query: db.movies.remove({title:"Pee Wee Herman's Big Adventure"})

query: db.movies.remove({title:"Avatar"})

query: db.users.insert({username:"GoodGuyGreg",first_name:"Good Guy",lastname:"Greg"})

query: db.users.insert({username:"ScumbagSteve", full_name:[{first:"Scumbag"},{last:"Steve"}]})

query: db.posts.insertMany([ {username:"GoodGuyGreg",title:"Passes out at party",body:"Wake up early and cleans house"}, {username:"GoodGuyGreg",title:"Steals your identity",body:"Raises your credit score"},{username:"GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a pull request"}, {username:"ScumbagSteve",title:"Borrows something",body:"Sells it"},{username:"ScumbagSteve",title:"Borrows everything",body:"The end"},{username:"Scumbag Steve", title:"Forks your repo on github", body:"Sets to private"}])

query: db.comments.insert({username:"GoodGuyGreg", comment:"Hope you got a good deal",post:ObjectId("61eedf46689f37598a18b079")})

query: db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours",post:ObjectId("61eedf46689f37598a18b07a")})

query: db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement",post:ObjectId("61eedf46689f37598a18b07b")})

query: db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean",post:ObjectId("61eedf46689f37598a18b076")})

query: db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack",post:ObjectId("61eedf46689f37598a18b078")})

Querying related collections

1. find all users
query: db.users.find().pretty()

2. find all posts
query: db.posts.find().pretty()

3. find all posts that was authored by "GoodGuyGreg"
query: db.posts.find({username:"GoodGuyGreg"})

4. find all posts that was authored by "ScumbagSteve"
query: db.posts.find({username:"ScumbagSteve"})

5. find all comments
query: db.comments.find().pretty()

6. find all comments that was authored by "GoodGuyGreg"
query: db.comments.find({username:"GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve"
query: db.comments.find({username:"ScumbagSteve"})
